// src/ricker.rs

/// Ricker wavelet.
pub fn ricker(time: f64, location: f64, cdtds: f64, ppw: f64) -> f64 {
    let arg = std::f64::consts::PI * ((cdtds * time - location) / ppw - 1.0);
    let arg = arg * arg;
    (1.0 - 2.0 * arg) * (-arg).exp()
}

#[cfg(test)]
mod tests {
    use super::*;

    // https://stackoverflow.com/a/30866922
    macro_rules! assert_delta {
        ($x:expr, $y:expr, $d:expr) => {
            if !($x - $y < $d || $y - $x < $d) {
                panic!();
            }
        };
    }

    #[test]
    fn test_ricker() {
        let cdtds = 1.0 / 2.0f64.sqrt();
        let data = vec![
            -0.000969, -0.001783, -0.003190, -0.005549, -0.009382, -0.015410, -0.024581, -0.038056,
            -0.057149, -0.083181, -0.117233, -0.159800, -0.210354, -0.266886, -0.325509, -0.380260,
            -0.423239, -0.445189, -0.436571, -0.389068, -0.297337, -0.160684, 0.015710, 0.220379,
            0.436244, 0.642418, 0.816935, 0.939981, 0.997012, 0.981140, 0.894292, 0.746880,
            0.556073, 0.343015, 0.129587, -0.064677, -0.224966, -0.342508, -0.414764, -0.444620,
            -0.438919, -0.406712, -0.357578, -0.300294, -0.241965, -0.187652, -0.140394, -0.101507,
            -0.071020, -0.048135, -0.031632, -0.020168, -0.012484, -0.007506, -0.004385, -0.002491,
            -0.001375, -0.000739, -0.000386, -0.000196, -0.000097, -0.000047, -0.000022, -0.000010,
            -0.000004, -0.000002, -0.000001, -0.000000,
        ];

        for (i, d) in data.into_iter().enumerate() {
            assert_delta!(ricker(i as f64, 0.0, cdtds, 20.0), d, 0.001f64);
        }
    }
}
